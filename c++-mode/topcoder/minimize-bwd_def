# -*- mode: snippet; require-final-newline: t -*-
# contributor: Leo Osvald <leo.osvald@gmail.com>
# name: def Minimize <-
# key: dMNB
# --
// Generalization returning a 1-based index of the minimal argument from the end
template<typename T, typename U, typename... US, size_t N = 1 + sizeof...(US),
         typename = typename std::enable_if<N - 1>::type>
inline size_t Minimize(T& res, U&& x, US&&... xs) {
  using std::forward;
  const auto end_index = Minimize(res, forward<US>(xs)...);
  const auto minimized = Minimize(res, x);
  return minimized * N + !minimized * end_index;
  // return minimized ? minimized * N : end_index;  // compiles OK
}
